Here's a simple example of a Dockerfile for a Java web application:

Copy code
# Use an official openjdk image as the base image
FROM openjdk:8-jdk-alpine

# Set the working directory in the container
WORKDIR /app

# Copy the application files into the container
COPY target/my-web-app.jar /app

# Expose the port on which the application runs
EXPOSE 8080

# Start the application
CMD ["java", "-jar", "my-web-app.jar"]
This Dockerfile uses the openjdk:8-jdk-alpine image as the base image, 
which is a minimal Java runtime environment based on Alpine Linux. 
The WORKDIR instruction sets the working directory in the container,
 and the COPY instruction copies the application JAR file (built by maven) into the container.

The EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime.
 In this case, the application listens on port 8080.

Finally, the CMD instruction runs the command to start the application.
 In this case, it runs the java -jar my-web-app.jar command, 
which starts the application using the JAR file that was copied into the container.

You may need to customize the Dockerfile to suit your specific application, 
such as setting environment variables, copying additional files,
 or running additional commands. Also, you'll need to have the JAR file generated already in the target folder before building the image.

You can build the image using the docker build command:

Copy code
docker build -t my-web-app .
This will create a new image with the tag "my-web-app". Once the image is built, you can start a new container with that image:

Copy code
docker run -p 8080:8080 my-web-app
this command maps the port of the container(8080) to the port of the host machine (8080) and runs the command specified in the CMD instruction inside the container using the my-web-app image.